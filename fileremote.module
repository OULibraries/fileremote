<?php
/**
 * @file
 */

require_once dirname(__FILE__) . '/fileremote.field.inc';
require_once dirname(__FILE__) . '/lib/DropboxTransfer.php';

/**
 * Implementation of hook_theme().
 */
function fileremote_theme() {
  $path = drupal_get_path('module', 'fileremote');
  $themes = array();
  $themes['fileremote'] = array(
    'render element' => 'element',
    'template' => 'fileremote_upload_widget',
    'path' => $path . '/templates',
  );
  return $themes;
}


/**
 * Implements hook_libraries_info().
 */
function fileremote_libraries_info() {

  $libraries['fine-uploader'] = array(
    'name' => 'Fine Uploader',
    'vendor url' => 'https://fineuploader.com/',
    'download url' => 'https://fineuploader.com/',
    'version callback' => 'fileremote_version_callback',
    'files' => array(
      'js' => array('fine-uploader.js',
            'jquery.fine-uploader.js'),
      'css' => array('fine-uploader-new.css')
    ),
  );

  return $libraries;
}

function fileremote_version_callback()  {
  // noop for now
  return TRUE;
}


function fileremote_menu() {
  $items = array();


  /* Start or continue upload as file chunks */
  $items['fileremote/upload'] = array(
    'page callback' => 'fileremote_fineuploader_handler_upload',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  /* Finalize file upload  */
  $items['fileremote/upload/done'] = array(
    'page callback' => 'fileremote_fineuploader_handler_done',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function fileremote_fineuploader_handler_upload() {
  $result = _fileremote_fineuploader_storeChunk();
  drupal_json_output($result);
}

function fileremote_fineuploader_handler_done() {
  $result = _fileremote_fineuploader_save();
  drupal_json_output($result);
}


/**
 * Rus on completed file transfer to finalize metadata, etc.
 */

function _fileremote_fineuploader_save() {
  return array();
}

/**
 * Implements chunked file transfer to dropbox.
 */
function _fileremote_fineuploader_storechunk() {


  $auth = "55Z3upN4RjEAAAAAAACYGkV0cO9o_yreQ3XR6vFyUkRarDfjb5jnhtZlH5WqqAGy";


  /* Get Fine Uploader file metadata  */
  $uuid = $_REQUEST["qquuid"];
  $filename =  $_REQUEST["qqfilename"];
  $totalparts = (int)$_REQUEST["qqtotalparts"];
  $totalfilesize = (int)$_REQUEST["qqtotalfilesize"];
  $partindex = (int)$_REQUEST["qqpartindex"];
  $chunk_path = $_FILES["qqfile"]["tmp_name"];

  /* Get a Guzzle client to inject */
  $client = new GuzzleHttp\Client();

  /* Have we started work on this upload ? */
  $ongoing_up = _fileremote_upload_load($uuid);

  if( $ongoing_up and ($partindex == $totalparts-1) ) {
    /* Do last part of ongoing upload */
    $dbxfer = new DropboxTransfer( $auth, $_REQUEST, $ongoing_up->sessionid, $client, $chunk_path);
    $result = $dbxfer->finish();
    _fileremote_upload_update( $uuid, $filename, $totalparts, $partindex, $ongoing_up->sessionid);
  }
  elseif( $ongoing_up and ($partindex  < $totalparts-1) ) {
    /* Do middle part of ongoing upload */
    $dbxfer = new DropboxTransfer( $auth, $_REQUEST, $ongoing_up->sessionid, $client, $chunk_path);
    $result = $dbxfer->appendv2();
    _fileremote_upload_update( $uuid, $filename, $totalparts, $partindex, $ongoing_up->sessionid);
  }
  elseif( ! $ongoing_up and $totalparts > 1) {
    /* Do first part of new upload and start new session */
    $dbxfer = new DropboxTransfer( $auth, $_REQUEST, NULL, $client, $chunk_path);
    $result = $dbxfer->start();
    _fileremote_upload_insert( $uuid, $filename, $totalparts, $partindex, $result->success->session_id);
  }
  elseif( ! $ongoing_up and $totalparts == 1) {
    /* Do a simple upload, don't bother to get a session */
    $dbxfer = new DropboxTransfer( $auth, $_REQUEST, NULL, $client, $chunk_path);
    $result = $dbxfer->upload();
    _fileremote_upload_insert( $uuid, $filename, $totalparts, $partindex, NULL);
  }
  else {
    /* Do some error handling ???*/
  }


  // Return status array for transmission as JSON
  if(! isset( $result->error) ) {
    return  array("success" => true );
  } else {
    return $result;
  }

}


/*
 * Load upload by uuid from fine uploader
 */
function _fileremote_upload_load($uuid) {
  $ongoing_up = db_select("fileremote_upload", "upload")
    ->fields("upload")
    ->condition("uuid", $uuid, "=")
    ->execute()
    ->fetchObject();
  return $ongoing_up;
}

/*
 * Record a new upload
 */
function _fileremote_upload_insert($uuid,$filename, $totalparts, $partindex, $sessionid){
  // Insert a new upload record.
  $ongoing_up = new stdClass();
  $ongoing_up->uuid = $uuid;
  $ongoing_up->filename = $filename;
  $ongoing_up->totalparts = $totalparts;
  $ongoing_up->partindex = $partindex;
  $ongoing_up->sessionid = $sessionid;
  $ongoing_up->timestamp = time();
  drupal_write_record('fileremote_upload', $ongoing_up);
}


/*
 * Update an existing upload record
 */
function _fileremote_upload_update($uuid,$filename, $totalparts, $partindex, $sessionid){
  $ongoing_up = new stdClass();
  $ongoing_up->uuid = $uuid;
  $ongoing_up->filename = $filename;
  $ongoing_up->totalparts = $totalparts;
  $ongoing_up->partindex = $partindex;
  $ongoing_up->sessionid = $sessionid;
  $ongoing_up->timestamp = time();
  drupal_write_record('fileremote_upload', $ongoing_up, "uuid");
}
