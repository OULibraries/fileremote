<?php
/**
 * @file
 */


// use Kunnu\Dropbox\Dropbox;
// use Kunnu\Dropbox\DropboxApp;
// use Kunnu\Dropbox\DropboxFile;


require_once dirname(__FILE__) . '/fileremote.field.inc';

/**
 * Implementation of hook_theme().
 */
function fileremote_theme() {
  $path = drupal_get_path('module', 'fileremote');
  $themes = array();
  $themes['fileremote'] = array(
    'render element' => 'element',
    'template' => 'fileremote_upload_widget',
    'path' => $path . '/templates',
  );
  return $themes;
}


/**
 * Implements hook_libraries_info().
 */

function fileremote_libraries_info() {

  $libraries['fine-uploader'] = array(
    'name' => 'Fine Uploader',
    'vendor url' => 'https://fineuploader.com/',
    'download url' => 'https://fineuploader.com/',
    'version callback' => 'fileremote_version_callback',
    'files' => array(
      'js' => array('fine-uploader.js',
            'jquery.fine-uploader.js'),
      'css' => array('fine-uploader-new.css')
    ),
  );

  return $libraries;
}

function fileremote_version_callback()  {
  // noop for now
  return TRUE;
}


function fileremote_menu() {
  $items = array();


  /* Start or continue upload as file chunks */
  $items['fileremote/upload'] = array(
    'page callback' => 'fileremote_fineuploader_handler_upload',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  /* Finalize file upload  */
  $items['fileremote/upload/done'] = array(
    'page callback' => 'fileremote_fineuploader_handler_done',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function fileremote_fineuploader_handler_upload() {
  $result = _fileremote_fineuploader_storeChunk();
  drupal_json_output($result);
}

function fileremote_fineuploader_handler_done() {
  $result = _fileremote_fineuploader_save();
  drupal_json_output($result);
}



function _fileremote_fineuploader_save() {
  return array("success" => true );
}


function _fileremote_fineuploader_storechunk() {

  $uuid = $_REQUEST["qquuid"];
  $offset = (int)$_REQUEST["qqpartbyteoffset"];
  $filename =  $_REQUEST["qqfilename"];
  $totalparts = (int)$_REQUEST["qqtotalparts"];
  $totalfilesize = (int)$_REQUEST["qqtotalfilesize"];
  $partindex = (int)$_REQUEST["qqpartindex"];
  $chunk_path = $_FILES["qqfile"]["tmp_name"];
  $chunk_size = filesize($chunk_path);
  $chunk = fopen($chunk_path, "r");


  $upload = _fileremote_upload_load($uuid);

  if( $upload and ($partindex == $totalparts-1) ) {
    watchdog("fileremote", "finishing session");

    /* last chunk of ongoing upload, so finish session */

    $api_args = [
      "cursor" => [
        "session_id" =>$upload->sessionid,
        "offset" => $offset
      ],
      "commit" => [
        "path"=> "/".$filename ,
        "mode"=> "add",
        "autorename"=> true,
        "mute"=> false
      ]
    ];

    ddl($api_args);

    $client = new GuzzleHttp\Client();
    $request = $client->createRequest('POST', 'https://content.dropboxapi.com/2/files/upload_session/finish', ['exceptions'=>false]);
    $request->setHeader("Authorization", "Bearer 55Z3upN4RjEAAAAAAACX-jUD7ffdp6kVVZAJvqf3krIDYbozcI7Z8niL-sXPjG8E");
    $request->setHeader("Dropbox-API-Arg", json_encode($api_args));
    $request->setHeader("Content-Type", "application/octet-stream");
    $request->setBody(GuzzleHttp\Stream\Stream::factory($chunk));

    $response = $client->send($request);

    $out_headers = $response->getHeaders();

    $msg = json_decode($response->getBody()) ;

    $debug_msg = $response->getBody() ;
    ddl((string)$debug_msg);

    _fileremote_upload_update( $uuid, $filename, $totalparts, $partindex, $upload->sessionid);
  } else if($upload and $partindex  < $totalparts-1) {
    watchdog("fileremote", "continuing  session");
    $api_args = [
      "close"=> false,
      "cursor" => [
        "session_id" => $upload->sessionid,
        "offset" => $offset
      ]
    ];

    ddl($api_args);

    $client = new GuzzleHttp\Client();
    $request = $client->createRequest('POST', 'https://content.dropboxapi.com/2/files/upload_session/append_v2', ['exceptions'=>false]);
    $request->setHeader("Authorization", "Bearer 55Z3upN4RjEAAAAAAACX-jUD7ffdp6kVVZAJvqf3krIDYbozcI7Z8niL-sXPjG8E");
    $request->setHeader("Dropbox-API-Arg", json_encode($api_args));
    $request->setHeader("Content-Type", "application/octet-stream");
    $request->setBody(GuzzleHttp\Stream\Stream::factory($chunk));

    $response = $client->send($request);

    $msg = $response->getBody() ;
    ddl((string)$msg);

    _fileremote_upload_update( $uuid, $filename, $totalparts, $partindex, $upload->sessionid);
  } else {
    /* No ongoing upload, so start session */
    watchdog("fileremote", "starting session");
    $api_args = ["close"=> false];

    ddl($api_args);

    $client = new GuzzleHttp\Client();
    $request = $client->createRequest('POST', 'https://content.dropboxapi.com/2/files/upload_session/start', ['exceptions'=>false]);
    $request->setHeader("Authorization", "Bearer 55Z3upN4RjEAAAAAAACX-jUD7ffdp6kVVZAJvqf3krIDYbozcI7Z8niL-sXPjG8E");
    $request->setHeader("Dropbox-API-Arg", json_encode($api_args));
    $request->setHeader("Content-Type", "application/octet-stream");
    $request->setBody(GuzzleHttp\Stream\Stream::factory($chunk));

    $response = $client->send($request);
    $msg = json_decode($response->getBody()) ;

    $sessionid = $msg->session_id;
    _fileremote_upload_insert( $uuid, $filename, $totalparts, $partindex, $sessionid);
    ;
  }

  return array("success" => true );
}

function _fileremote_upload_load($uuid) {
  $upload = db_select("fileremote_upload", "upload")
    ->fields("upload")
    ->execute()
    ->fetchObject();
  return $upload;
}

function _fileremote_upload_insert($uuid,$filename, $totalparts, $partindex, $sessionid){
  // Insert a new upload record.
  $upload = new stdClass();
  $upload->uuid = $uuid;
  $upload->filename = $filename;
  $upload->totalparts = $totalparts;
  $upload->partindex = $partindex;
  $upload->sessionid = $sessionid;
  $upload->timestamp = time();
  drupal_write_record('fileremote_upload', $upload);
}


function _fileremote_upload_update($uuid,$filename, $totalparts, $partindex, $sessionid){
  // Insert a new upload record.
  $upload = new stdClass();
  $upload->uuid = $uuid;
  $upload->filename = $filename;
  $upload->totalparts = $totalparts;
  $upload->partindex = $partindex;
  $upload->sessionid = $sessionid;
  $upload->timestamp = time();
  drupal_write_record('fileremote_upload', $upload, "uuid");
}
