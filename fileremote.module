<?php
/**
 * @file
 */

require_once dirname(__FILE__) . '/fileremote.field.inc';

/**
 * Implementation of hook_theme().
 */
function fileremote_theme() {
  $path = drupal_get_path('module', 'fileremote');
  $themes = array();
  $themes['fileremote'] = array(
    'render element' => 'element',
    'template' => 'fileremote_upload_widget',
    'path' => $path . '/templates',
  );
  return $themes;
}


/**
 * Implements hook_libraries_info().
 */

function fileremote_libraries_info() {

  $libraries['fine-uploader'] = array(
    'name' => 'Fine Uploader',
    'vendor url' => 'https://fineuploader.com/',
    'download url' => 'https://fineuploader.com/',
    'version callback' => 'fileremote_version_callback',
    'files' => array(
      'js' => array('fine-uploader.js',
            'jquery.fine-uploader.js'),
      'css' => array('fine-uploader-new.css')
    ),
  );

  return $libraries;
}

function fileremote_version_callback()  {
  // noop for now
  return TRUE;
}


function fileremote_menu() {
  $items = array();
  $items['fileremote/upload'] = array(
    'page callback' => 'fileremote_fineuploader_handler',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function fileremote_fineuploader_handler() {

  // Include the upload handler class
  require_once "handler.php";

  $uploader = new UploadHandler();

  // Specify the list of valid extensions, ex. array("jpeg", "xml", "bmp")
  $uploader->allowedExtensions = array(); // all files types allowed by default

  // Specify max file size in bytes.
  $uploader->sizeLimit = null;

  // Specify the input name set in the javascript.
  $uploader->inputName = "qqfile"; // matches Fine Uploader's default inputName value by default

  // If you want to use the chunking/resume feature, specify the folder to temporarily save parts.
  $uploader->chunksFolder = "chunks";

  $method = get_request_method();


    if ($method == "POST") {

      // Assumes you have a chunking.success.endpoint set to point here with a query parameter of "done".
      // For example: /myserver/handlers/endpoint.php?done
      if (isset($_GET["done"])) {
        $result = $uploader->combineChunks("/srv/vrfiles/drupal/sites/default/files");
      }
      // Handles upload requests
      else {
        // Call handleUpload() with the name of the folder, relative to PHP's getcwd()
        $result = $uploader->handleUpload("/srv/vrfiles/drupal/sites/default/files");

        // To return a name used for uploaded file you can use the following line.
        $result["uploadName"] = $uploader->getUploadName();
      }

    }
  // for delete file requests
    else if ($method == "DELETE") {
      $result = $uploader->handleDelete("/srv/vrfiles/drupal/sites/default/files");
    }
    else {
      header("HTTP/1.0 405 Method Not Allowed");
    }
    drupal_json_output($result);
}

// This will retrieve the "intended" request method.  Normally, this is the
// actual method of the request.  Sometimes, though, the intended request method
// must be hidden in the parameters of the request.  For example, when attempting to
// delete a file using a POST request. In that case, "DELETE" will be sent along with
// the request in a "_method" parameter.
function get_request_method() {
  global $HTTP_RAW_POST_DATA;

  if(isset($HTTP_RAW_POST_DATA)) {
    parse_str($HTTP_RAW_POST_DATA, $_POST);
  }

  if (isset($_POST["_method"]) && $_POST["_method"] != null) {
    return $_POST["_method"];
  }

  return $_SERVER["REQUEST_METHOD"];
}
