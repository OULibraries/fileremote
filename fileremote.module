<?php
/**
 * @file
 */


// use Kunnu\Dropbox\Dropbox;
// use Kunnu\Dropbox\DropboxApp;
// use Kunnu\Dropbox\DropboxFile;

require_once dirname(__FILE__) . '/fileremote.field.inc';

/**
 * Implementation of hook_theme().
 */
function fileremote_theme() {
  $path = drupal_get_path('module', 'fileremote');
  $themes = array();
  $themes['fileremote'] = array(
    'render element' => 'element',
    'template' => 'fileremote_upload_widget',
    'path' => $path . '/templates',
  );
  return $themes;
}


/**
 * Implements hook_libraries_info().
 */

function fileremote_libraries_info() {

  $libraries['fine-uploader'] = array(
    'name' => 'Fine Uploader',
    'vendor url' => 'https://fineuploader.com/',
    'download url' => 'https://fineuploader.com/',
    'version callback' => 'fileremote_version_callback',
    'files' => array(
      'js' => array('fine-uploader.js',
            'jquery.fine-uploader.js'),
      'css' => array('fine-uploader-new.css')
    ),
  );

  return $libraries;
}

function fileremote_version_callback()  {
  // noop for now
  return TRUE;
}


function fileremote_menu() {
  $items = array();


  /* Start or continue upload as file chunks */
  $items['fileremote/upload'] = array(
    'page callback' => 'fileremote_fineuploader_handler_upload',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  /* Finalize file upload  */
  $items['fileremote/upload/done'] = array(
    'page callback' => 'fileremote_fineuploader_handler_done',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function fileremote_fineuploader_handler_upload() {
  $result = _fileremote_fineuploader_storeChunk();
  drupal_json_output($result);
}

function fileremote_fineuploader_handler_done() {
  $result = _fileremote_fineuploader_save();
  drupal_json_output($result);
}



function _fileremote_fineuploader_save() {
  // $app = new DropboxApp("24mxowlcwov862v", "dwdfyg6dig8qtdl", "55Z3upN4RjEAAAAAAACXYvfTdxysK68hAbl2arxI_yPMyEZzPY5I7jExgFr_xNWi");
  // $dbx = new Dropbox($app);
  // $uuid = $_REQUEST["qquuid"];
  // $filename =  $_REQUEST["qqfilename"];
  // $totalsize = $_REQUEST["qqtotalfilesize"];
  // $temp = fopen("php://temp","rw");
  // $fakeFile = DropboxFile::createByStream("/".$filename, $temp);


  // $upload = _fileremote_upload_load($uuid);
  // if($upload) {

  //   $sessionid = $dbx->finishUploadSession($fakeFile, $upload->sessionid, $totalsize, 0, "/".$filename );
  //   _fileremote_upload_update( $uuid, $filename, $totalparts, $partindex, $sessionid);
  // }
  return array("success" => true );
}


function _fileremote_fineuploader_storechunk() {

  // $app = new DropboxApp("24mxowlcwov862v", "dwdfyg6dig8qtdl", "55Z3upN4RjEAAAAAAACXYvfTdxysK68hAbl2arxI_yPMyEZzPY5I7jExgFr_xNWi");
  // $dbx = new Dropbox($app);


  // $uuid = $_REQUEST["qquuid"];
  // $filename =  $_REQUEST["qqfilename"];
  // $totalparts = $_REQUEST["qqtotalparts"];
  // $partindex = $_REQUEST["partindex"];


  // // Save a file chunk to temp stream in prep for write to dropbox This is a bit
  // // weird, but looks like the easiest way to use our dropbox library
  // $chunk_path = $_FILES["qqfile"]["tmp_name"];
  // $chunk_size = filesize($chunk_path);
  // $chunk = fopen($chunk_path, "r");
  // $temp = fopen("php://temp","rw");
  // stream_copy_to_stream( $chunk, $temp);
  // rewind($temp);
  // $fakeFile = DropboxFile::createByStream("/".$filename, $temp);


  // $upload = _fileremote_upload_load($uuid);
  // if($upload) {

  //   $sessionid = $dbx->appendUploadSession($fakeFile, $upload->sessionid, 0, $chunk_size);
  //   _fileremote_upload_update( $uuid, $filename, $totalparts, $partindex, $sessionid);
  // }
  // else {
  //   $sessionid = $dbx->startUploadSession($fakeFile, $chunk_size);
  //   _fileremote_upload_insert( $uuid, $filename, $totalparts, $partindex, $sessionid);
  // }

  return array("success" => true );
}

function _fileremote_upload_load($uuid) {
  $upload = db_select("fileremote_upload", "upload")
    ->fields("upload")
    ->execute()
    ->fetchObject();
  return $upload;
}

function _fileremote_upload_insert($uuid,$filename, $totalparts, $partindex, $sessionid){
  // Insert a new upload record.
  $upload = new stdClass();
  $upload->uuid = $uuid;
  $upload->filename = $filename;
  $upload->totalparts = $totalparts;
  $upload->partindex = $partindex;
  $upload->sessionid = $sessionid;
  $upload->timestamp = time();
  drupal_write_record('fileremote_upload', $upload);
}


function _fileremote_upload_update($uuid,$filename, $totalparts, $partindex, $sessionid){
  // Insert a new upload record.
  $upload = new stdClass();
  $upload->uuid = $uuid;
  $upload->filename = $filename;
  $upload->totalparts = $totalparts;
  $upload->partindex = $partindex;
  $upload->sessionid = $sessionid;
  $upload->timestamp = time();
  drupal_write_record('fileremote_upload', $upload, "uuid");
}
